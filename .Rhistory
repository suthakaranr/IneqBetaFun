#realdata = Radio$x
#data(lowestoft)
#realdata = as.vector(lowestoft)
###########################  Method 1
k_PQ = delta_PQ = NULL
method1 = function(x){
n = length(x)
All_Q = c(0.5, 0.6, 0.75, 0.85, n/(n+1))
for(i in 1:length(All_Q)){
sort_x = sort(x)
Q = All_Q[i]
P = 1 - sqrt(1-Q)
n_1 = ceiling((n+1)*P)
n_2 = ceiling((n+1)*Q)
X_n1 = sort_x[n_1]
X_n2 = sort_x[n_2]
k_PQ[i] = log(X_n2/X_n1 - 1)/log(1 - P)
delta_PQ[i] = ((X_n1)^2)/(2*X_n1 - X_n2)
}
sigma_PQ = k_PQ * delta_PQ
k13hat0 = median(k_PQ)
sigma13hat0 = median(sigma_PQ)
W1 = k13hat0 * max(x)/sigma13hat0
k13hat = ifelse(W1<1, k13hat0, max(k_PQ))
sigma13hat = ifelse(W1<1, sigma13hat0, max(sigma_PQ))
return(c(sigma13hat, k13hat))
}
estm1 = method1(realdata)
###########################  Method 1
k_PQ = delta_PQ = NULL
method2 = function(x){
n = length(x)
m = 5
l = c(1:m)
All_Q = (n - m + l)/(n+1)
for(i in 1:length(All_Q)){
sort_x = sort(x)
Q = All_Q[i]
P = 1 - sqrt(1-Q)
n_1 = ceiling((n+1)*P)
n_2 = ceiling((n+1)*Q)
X_n1 = sort_x[n_1]
X_n2 = sort_x[n_2]
k_PQ[i] = log(X_n2/X_n1 - 1)/log(1 - P)
delta_PQ[i] = ((X_n1)^2)/(2*X_n1 - X_n2)
sigma_PQ = k_PQ * delta_PQ
}
sigma_PQ = k_PQ * delta_PQ
k23hat0 = median(k_PQ)
sigma23hat0 = median(sigma_PQ)
W1 = k23hat0 * max(x)/sigma23hat0
k23hat = ifelse(W1<1, k23hat0, max(k_PQ))
sigma23hat = ifelse(W1<1, sigma23hat0, max(sigma_PQ))
return(c(sigma23hat, k23hat))
}
estm2 = method2(realdata)
x = realdata
########################### Method 3
method3 = function(x){
n = length(x)
est1 = method1(x)
est2 = method2(x)
k3hat = (est1[2] + est2[2])/2
sigma3hatzero = ifelse(est1[1] <= 1/4, est1[1], (est1[1] + est2[1])/2)
w3 = k3hat*max(x)/sigma3hatzero
sigma3hat = ifelse(w3 < 1, sigma3hatzero, (est1[1] + est2[1])/2)
return(c(sigma3hat, k3hat))
}
estm3 = method3(realdata)
########################### Method QM
methodQM = function(x) {
n = length(x)
All_Q = c(0.5, 0.6, 0.75, 0.85, n/(n + 1))
for (i in 1:length(All_Q)) {
sort_x = sort(x)
Q = All_Q[i]
P = 1 - (1 - Q)^(1/3)
n_1 = ceiling((n + 1) * P)
n_2 = ceiling((n + 1) * Q)
X_n1 = sort_x[n_1]
X_n2 = sort_x[n_2]
delta_PQ[i] = (-3 * X_n1^(2) - sqrt(4 * X_n1^(3) * X_n2 - 3 * X_n1^(4)))/(2 * (X_n2 - 3 * X_n1))
delta = (-3 * X_n1^(2) - sqrt(4 * X_n1^(3) * X_n2 - 3 * X_n1^(4)))/(2 * (X_n2 - 3 * X_n1))
k_PQ[i] = log(1 - X_n1/delta)/log(1 - P)
}
sigma_PQ = k_PQ * delta_PQ
k4hat0 = median(k_PQ)
sigma4hat0 = median(sigma_PQ)
W4 = k4hat0 * max(x)/sigma4hat0
k4hat = ifelse(W4 < 1, k4hat0, max(k_PQ))
sigma4hat = ifelse(W4 < 1, sigma4hat0, max(sigma_PQ))
return(c(sigma4hat,k4hat))
}
estqm = methodQM(realdata)
########################### Method POS
qgpd2 <- function(p, sigma = 1, k){
n <- length(p)
q <- 1:n*NA
for (i in 1:n){
if (p[i] <= 0){q[i] <- -Inf}
if (p[i] == 1){q[i] <- max(p)}
if (p[i] >  1){q[i] <- Inf}
if (is.na(q[i]) == 1){
if (k!=0){q[i] <- (1 - (1-p[i])^(k))/k}
if (k==0){q[i] <- -log(1-p[i])}}
}
return(q * sigma)
}
pgpd2 <- function(q, sigma = 1, k){
n <- length(q)
p <- 1:n*NA
if (k>0){
II <- (1:n)*(q>=0)*(q< sigma/k)
p[II] <- 1-(1 - k*q[II]/sigma)^(1/k)}
II <- (1:n)*(q>=0)
if (k==0){p[II] <- 1-exp(-q[II]/sigma)}
if (k<0){p[II] <- 1-(1 - k*q[II]/sigma)^(1/k)}
return(p)
}
rgpd2 <- function(n, sigma = 1, k){
u <- runif(n,0,1)
r <- qgpd2(u, sigma, k)
err <- 0
if (n<=0){
err <- 1
cat('Please give a strict positive n!')}
if (err==0){return(sort(r))}
}
fnn = function(para, x){
n = length(x)
x = sort(x)
c = numeric(n - 1)
d = numeric(n - 1)
for (i in 2:n){
c[i - 1] = pgpd2(x[i], para[1], para[2])
d[i - 1] = pgpd2(x[i-1], para[1], para[2])
}
s = sum(log1p(c - d))
return(-s)
}
#65010
set.seed(651234)
est = method1(realdata)
opt = optim(c(est), fnn, x= realdata,  method="SANN")
estpos = opt$par
estpos
install.packages("TSMCP")
library(TSMCP)
Y <- rnorm(1000, 0, 0.5) +
c(rep(0,100), rep(4,30),rep(-1,20), rep(2,80), rep(-2,20),
rep(3,150), rep(-1, 40), rep(1,210), rep(5,110), rep(2,20),
rep(7,30), rep(3,190))
ts.plot(Y)
tsmcplm(Y = Y, X = NULL, method = "adapt", c = 0.3)
y[t] <- cos(t*pi/61) + 3*sin(t*pi/61) + 0.5*y[t-1] + (2*sin(t*pi/61) +
0.1 * y[t-1])*(200 < t)+ (2* cos(t*pi/61)- 4 *sin(t*pi/61)- 0.6* y[t-1] )*
(350 < t) + (2* sin(t*pi/61) + 0.7* y[t-1] )*(450 < t) + (-3* sin(t*pi/61) -
0.3* y[t-1] )*(550 < t) + (-3* cos(t*pi/61) + 5* sin(t*pi/61))* (700 < t) +
(3* cos(t*pi/61) - 5* sin(t*pi/61) - 0.4*y[t-1] )* (850 < t) + rnorm(1)
y[t] <- cos(t*pi/61) + 3*sin(t*pi/61) + 0.5*y[t-1] + (2*sin(t*pi/61) +0.1 * y[t-1])*(200 < t)+ (2* cos(t*pi/61)- 4 *sin(t*pi/61)- 0.6* y[t-1] )*
(350 < t) + (2* sin(t*pi/61) + 0.7* y[t-1] )*(450 < t) + (-3* sin(t*pi/61) - 0.3* y[t-1] )*(550 < t) + (-3* cos(t*pi/61) + 5* sin(t*pi/61))* (700 < t) +
(3* cos(t*pi/61) - 5* sin(t*pi/61) - 0.4*y[t-1] )* (850 < t) + rnorm(1)
pi
n <- 1000
y <- rnorm(n)
for (t in 2:n) {
y[t] <- cos(t*pi/61) + 3*sin(t*pi/61) + 0.5*y[t-1] + (2*sin(t*pi/61) +0.1 * y[t-1])*(200 < t)+ (2* cos(t*pi/61)- 4 *sin(t*pi/61)- 0.6* y[t-1] )*
(350 < t) + (2* sin(t*pi/61) + 0.7* y[t-1] )*(450 < t) + (-3* sin(t*pi/61) - 0.3* y[t-1] )*(550 < t) + (-3* cos(t*pi/61) + 5* sin(t*pi/61))* (700 < t) +
(3* cos(t*pi/61) - 5* sin(t*pi/61) - 0.4*y[t-1] )* (850 < t) + rnorm(1)
}
ts.plot(y)
x <- sapply(2:n, function(t){cbind(cos(t*pi/61), sin(t*pi/61), y[t-1])},
simplify = FALSE)
x <- do.call(rbind, x)
dim(x)
names(x)
head(x)
dim(x)
tsmcplm(Y = y[-1], X = x, method = "adapt", c = 2)
tsmcplm(Y = y[-1], X = x, method = "scad", c = 2)
library(lars)
install.packages("lars")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
rm(list = ls())
library(ggplot2)
# y = Shear Strength
# x = Age of Propellant
data1 = read.table("D:\\CSUSB\\Fall 2021\\MATH 4360\\RNotes\\ex21.txt", header = TRUE)
library(ggplot2)
# y = Shear Strength
# x = Age of Propellant
data1 = read.table("D:\\CSUSB\\Fall 2021\\MATH 4360\\RNotes\\ex21.txt", header = TRUE)
names(data1)
head(data1)
rm(list = ls())
library(ggplot2)
# y = Shear Strength
# x = Age of Propellant
data1 = read.table("D:\\CSUSB\\Fall 2021\\MATH 4360\\RNotes\\ex21.txt", header = TRUE)
names(data1)
head(data1)
y = data1$y
x = data1$x
n = nrow(data1)
n
x_mat = cbind(rep(1, n), data1$x)
X = cbind(rep(1, n), data1$x)
Y = data1$y
Xt_X = t(X) %*% X
Xt_y = t(X) %*% y
Xt_X_inv = solve(Xt_X)
beta_hat = Xt_X_inv %*% Xt_y
beta_hat
vcov(Fit1)
# Using the lm() function in R
Fit1 = lm(y ~ x, data = data1)
vcov(Fit1)
rm(list = ls())
library(boot)
library(rootSolve)
#t0  =1
#alpha = 0.05
final=function(n,nn,alpha){
c=seq(0.01,5,0.01)
#c=seq(0.01,5,0.01)
cc=seq(0.01,10.5,0.01)
#tt = seq(0.2, 1.2, 0.2)
tt = seq(0.5,3,0.5)
#seq(0.2, 1.2, 0.2)
#seq(1.2,2.7,0.3) # n = 30
#seq(1,3.5,0.5) # n = 50
lucb=c()
#M=function(t0){
#  as.numeric(integrate(function(x){ pweibull(x,shape=0.5,scale=2,lower.tail=FALSE)},t0,20000)[1])/pweibull(t0,shape=0.5,scale=2,lower.tail=FALSE)
#}
#M=function(t0){
#  as.numeric(integrate(function(x){punif(x, 1, 4,lower.tail=FALSE)},t0, 200)[1])/(punif(t0, 1, 4,lower.tail=FALSE))
#}
M=function(t0){
as.numeric(integrate(function(x){pgamma(x, shape = 4, scale =  1/2,lower.tail=FALSE)},t0, 10)[1])/(pgamma(t0, shape = 4, scale =  1/2,lower.tail=FALSE))
}
#M=function(t0){
#  as.numeric(integrate(function(x){pexp(x, 1/4,lower.tail=FALSE)},t0, 200)[1])/(pexp(t0, 1/4,lower.tail=FALSE))
#}
## EL
FF1=function(m,q) mean((((t0+m)/yy)-1)/(1+q*(((t0+m)/yy)-1)))
FF2=function(m,q){
2*sum(log(1+q*(((t0+m)/yy)-1)))-qchisq(p=alpha,df=1,ncp=0,lower.tail=FALSE,log.p=FALSE)
}
model = function(s)c(FF1(m=s[1],q=s[2]),FF2(m=s[1],q=s[2])) # EL
## AEL
tol1 = 0.2
FF1_AEL=function(m,q)mean((((t0+m)/yy1)-1)/(1+(q)*(((t0+m)/yy1)-1)))
FF2_AEL =function(m,q){
2*sum(log(1+(q)*(((t0+m)/yy1)-1))) - tol1 - qchisq(p=alpha,df=1,ncp=0,lower.tail=FALSE,log.p=FALSE)
}
model_AEL = function(s)c(FF1_AEL(m=s[1],q=s[2]),FF2_AEL(m=s[1],q=s[2])) # AEL
## TEL
FF1_TEL = function(m,q) mean((((t0+m)/yy)-1)/(1+q*(((t0+m)/yy)-1)))
FF2_TEL = function(m,q){
like = 2*sum(log(1+q*(((t0+m)/yy)-1)))
like_t = like * max(c((1 - like/n), 0.5))
return(like_t  - qchisq(p=alpha,df=1,ncp=0,lower.tail=FALSE,log.p=FALSE))
}
model_TEL = function(s)c(FF1_TEL(m=s[1],q=s[2]),FF2_TEL(m=s[1],q=s[2])) # TEL
## TAEL
tol2 = 0.1
FF1_TAEL = function(m,q) mean((((t0+m)/yy1)-1)/(1+(q)*(((t0+m)/yy1)-1)))
FF2_TAEL = function(m,q){
like = 2*sum(log(1+(q)*(((t0+m)/yy1)-1)))
like_t = like * max(c((1 - like/n), 0.5))
return(like_t - tol2 - qchisq(p=alpha,df=1,ncp=0,lower.tail=FALSE,log.p=FALSE))
}
model_TAEL = function(s)c(FF1_TAEL(m=s[1],q=s[2]),FF2_TAEL(m=s[1],q=s[2])) # TAEL
FF3=function(o){(n/sn)*((mn-o)^2) - qchisq(p=alpha,df=1,ncp=0,lower.tail=FALSE,log.p=FALSE)}
FF4=function(y,i){
xx=y[i]
mun2=(sum(1/xx)/n)^-1
yo2=c(xx[xx<t0])
fnt2=(mun2/n)*sum(1/yo2)
xx=c(y[xx>t0])
mn2=(mun2/n)*length(xx)
mn2=(mn2/(1-fnt2))-t0
sqrt(n)*((mn2)-mn)
}
#FF5=function(y,a)as.numeric(integrate(function(x){ (x/3)/(8/3)},0,upper=y)[1])-a # Uniform
FF5=function(y, a)as.numeric(integrate(function(x){ x^4 * exp(-2*x) * 4/3  }, 0, upper=y)[1]) - a
FF6=function(y)uniroot(F5,c(0, 2699),tol=0.0001, a = y)
F5=Vectorize(FF5)
F6=Vectorize(FF6)
for(t0 in tt){
cb=cb0=cb1=cb2=cb3=c()
j=0
mrl=M(t0)
while(j<nn){
y=runif(n,0,1)
y=c(as.numeric(F6(y)[1,]))
y=sort(y)
yy=c(y[y>t0])
a_n = 0.5*log(n)
y1 = c(y, -a_n*mean(y))
#y1 = y1
y1=sort(y1)
yy1=c(y1[y1>t0])
r=r0=r1=r2=r3=c()
## EL
for(i in c)r=c(r,multiroot(f=model,start=c(i,0.25))$root[1])
r=r[!is.na(r)]
r=sort(r)
while(r[1]<0)r=r[-1]
while((r[2]-r[1])>0.01)r=r[-1]
while((r[length(r)]-r[length(r)-1])>0.01)r=r[-length(r)]
## AEL
for(i in c)r1=c(r1,multiroot(f=model_AEL,start=c(i,0.25))$root[1])
r1=r1[!is.na(r1)]
r1=sort(r1)
while(r1[1]<0)r1=r1[-1]
while((r1[2]-r1[1])>0.01)r1=r1[-1]
while((r1[length(r1)]-r1[length(r1)-1])>0.01)r1=r1[-length(r1)]
## TEL
for(i in c)r2=c(r2,multiroot(f=model_TEL,start=c(i,0.25))$root[1])
r2=r2[!is.na(r2)]
r2=sort(r2)
while(r2[1]<0)r2=r2[-1]
while((r2[2]-r2[1])>0.01)r2=r2[-1]
while((r2[length(r2)]-r2[length(r2)-1])>0.01)r2=r2[-length(r2)]
## TAEL
for(i in c)r3=c(r3,multiroot(f=model_TAEL,start=c(i,0.25))$root[1])
r3=r3[!is.na(r3)]
r3=sort(r3)
while(r3[1]<0)r3=r3[-1]
while((r3[2]-r3[1])>0.01)r3=r3[-1]
while((r3[length(r3)]-r3[length(r3)-1])>0.01)r3=r3[-length(r3)]
j=j+1
mun=(sum(1/y)/n)^-1
yo=c(y[y<t0])
fnt=(mun/n)*sum(1/yo)
mn=(mun/n)*length(yy)
mn=(mn/(1-fnt))-t0
sn=sd(boot(y,FF4,R=500)$t)
r0=c(qnorm(alpha/2,0,1)*(sn/sqrt(n))+mn, -qnorm(alpha/2,0,1)*(sn/sqrt(n))+mn)
cb=rbind(cb,c(r[1],r[length(r)],r[length(r)]-r[1],  sign((mrl-r[1])*(r[length(r)]-mrl))+1)) #EL
cb1=rbind(cb1,c(r1[1],r1[length(r1)],r1[length(r1)]-r1[1],  sign((mrl-r1[1])*(r1[length(r1)]-mrl))+1)) #AEL
cb2=rbind(cb2,c(r2[1],r2[length(r2)],r2[length(r2)]-r2[1],  sign((mrl-r2[1])*(r2[length(r2)]-mrl))+1)) #TEL
cb3=rbind(cb3,c(r3[1],r3[length(r3)],r3[length(r3)]-r3[1],  sign((mrl-r3[1])*(r3[length(r3)]-mrl))+1)) #TAEL
cb0=rbind(cb0,c(r0[1],r0[2],r0[2]-r0[1],  sign((mrl-r0[1])*(r0[2]-mrl))+1))  # NA
}
#### EL
cat("time=",t0,"\n")
cat("MRL(t=",t0,")",mrl,"\n")
cat("EL: C.I.=(",mean(cb[,1]),",",mean(cb[,2]),"); length=",
mean(cb[,3])," and CP=",mean(cb[,4])/2)
#### AEL
cat("\n")
cat("AEL: C.I.=(",mean(cb1[,1]),",",mean(cb1[,2]),"); length=",
mean(cb1[,3])," and CP=",mean(cb1[,4])/2)
#### TEL
cat("\n")
cat("TEL: C.I.=(",mean(cb2[,1]),",",mean(cb2[,2]),"); length=",
mean(cb2[,3])," and CP=",mean(cb2[,4])/2)
#### TAEL
cat("\n")
cat("TAEL: C.I.=(",mean(cb3[,1]),",",mean(cb3[,2]),"); length=",
mean(cb3[,3])," and CP=",mean(cb3[,4])/2)
#### NA
cat("\n")
cat("NA: C.I.=(",mean(cb0[,1]),",",mean(cb0[,2]),"); length =",
mean(cb0[,3])," and  CP=",mean(cb0[,4])/2)
cat("\n")
}
}
final(n=50,nn=1000,alpha=0.05)
seq(1.2,3,0.3)
sample(1:40, replace = FALSE)
data.frame(x = sample(1:40, replace = FALSE))
data.frame(x = sample(1:37, replace = FALSE))
data.frame(x = sample(1:37, replace = FALSE))
data.frame(x = sample(1:37, replace = FALSE))
pnorm(52, 52, 406)
pnorm(52, 177, 406)
pnorm(760,52, 406) - pnorm(52, 177, 406)
pnorm(760,177, 406) - pnorm(52, 177, 406)
qnorm(760,177, 406) - qnorm(52, 177, 406)
pnorm(760,177, 406)
pnorm(760, 406, 177) - pnorm(52, 406, 177)
pnorm(583, 406, 177) - pnorm(229, 406, 177)
pbinom(8, 15, 0.2)
dbinom(8, 15, 0.2)
1 - pbinom(7, 15, 0.2)
pbinom(7, 15, 0.2) -  pbinom(3, 15, 0.2)
dbinom(6, 10, 0.55)
dbinom(8, 10, 0.55)
dbinom(4, 10, 0.55) + dbinom(5, 10, 0.55) + dbinom(6, 10, 0.55)
pbinorm(8, 15, 0.2)
pbinom(8, 15, 0.2)
dbinom(8, 15, 0.2)
pbinom(7, 15, 0.2)
1 - pbinom(7, 15, 0.2)
pbinom(7, 15, 0.2) - pbinom(3, 15, 0.2)
dbinom(6, 10, 0.55)
dbinom(8, 10, 0.55)
pbinom(6, 10, 0.55) - pbinom(3, 10, 0.55)
dbinom(9, 10, 0.9)
dbinom(9, 10, 0.9)
pbinom(8, 10, 0.9)
1 - pbinom(30,50,0.6)
pbinom(31,50,0.6, FALSE)
pbinom(31,50,0.6, lower.tail = F)
pbinom(30,50,0.6, lower.tail = F)
pbinom(31,50,0.6, lower.tail = F)
pbinom(30,50,0.6, lower.tail = F)
1 - pbinom(30,50,0.6)
pbinom(30,50,0.6, lower.tail = F)
1 - pbinom(31,50,0.6)
pbinom(31,50,0.6, lower.tail = F)
1 - pbinom(31,50,0.6)
sqrt(1.04)
dbinom(25,50,0.6)
rm(list = ls())
library(ggplot2)
myfunc = function(n, z_score){
sample_z = rnorm(n)
xbar = mean(sample_z)
s = sd(sample_z)
L = xbar - z_score * s
U = xbar + z_score * s
count = as.numeric(L <= sample_z & sample_z <= U)
return(sum(count)/n)
}
n = 30 # Sample size
N = 1000 # Iterations
Cov_prob = mean_val = NULL
my_z = seq(1, 6, by = 0.01)
myfun1 = function(){
for(t in 1: length(my_z)){
for(i in 1:N){
Cov_prob[i] = myfunc(n, my_z[t])
}
mean_val[t] = mean(Cov_prob)
}
return(data.frame(Z_Score = my_z, Percent = mean_val))
}
data1 = myfun1()
data1
ggplot(data1, aes(x=Z_Score, y=Percent)) +
geom_line(color = "steel blue", size = 0.5) +
geom_point(color = "red", size = 0.5) +
scale_y_continuous(limits = c(0, 1)) +
xlab("Z Score") + ylab("Percent")
rm(list = ls())
library(ggplot2)
myfunc = function(n, z_score){
sample_z = rnorm(n)
xbar = mean(sample_z)
s = sd(sample_z)
L = xbar - z_score * s
U = xbar + z_score * s
count = as.numeric(L <= sample_z & sample_z <= U)
return(sum(count)/n)
}
n = 30 # Sample size
N = 1000 # Iterations
Cov_prob = mean_val = NULL
my_z = seq(0, 6, by = 0.01)
myfun1 = function(){
for(t in 1: length(my_z)){
for(i in 1:N){
Cov_prob[i] = myfunc(n, my_z[t])
}
mean_val[t] = mean(Cov_prob)
}
return(data.frame(Z_Score = my_z, Percent = mean_val))
}
data1 = myfun1()
data1
ggplot(data1, aes(x=Z_Score, y=Percent)) +
geom_line(color = "steel blue", size = 0.5) +
geom_point(color = "red", size = 0.5) +
scale_y_continuous(limits = c(0, 1)) +
xlab("Z Score") + ylab("Percent")
setwd("~/IneqBetaFun")
rm(list = ls())
library(devtools) # Make sure that the devtools library is loaded
load_all()
setwd("C:/Users/rsuth/Desktop/IneqBetaFun")
rm(list = ls())
library(devtools) # Make sure that the devtools library is loaded
load_all(".")
them_3_1(1/2, 1/2) # Theorem 3.1
them_3_2(1/2,1/2) # Theorem 3.2
them_3_3(1/2,1/2) # Theorem 3.3
them_3_4(1/2,1/2) # Theorem 3.4
them_3_5(2,2) # Theorem 3.5
them_3_6(2,2) # Theorem 3.6
them_3_7(0.25,0.5) #  Theorem 3.7: Case 1
them_3_7(0.5,1) #  Theorem 3.7; Case 2
them_3_8(2,2) # Theorem 3.8
them_3_10(4,2) # Theorem 3.10: Case 1
them_3_10(4,3.5) # Theorem 3.10: Case 2
them_3_11(4,2) # Theorem 3.11: Case 1
them_3_11(5,5) # Theorem 3.11: Case 2
corollary_2(1, 1.5) # Corollary 2
them_3_14(1,2) # Theorem 3.14
them_3_15(1,2) # Theorem 3.15
them_3_9(0.5,0.75) # Theorem 3.9: Case 1: x1 <= x2
them_3_9(1.5,1)   # Theorem 3.9: Case 2: x1 > x2
them_3_17(1, 1.5, 2) # Theorem 3.17
corollary_ratio_1(1, 1.5,2, 3) # Corollary 1
them_3_13(1, 1.5,2) # Theorem 3.13
them_3_16(1, 1.5,2) # Theorem 3.16
them_3_17(1, 1.5,2) # Theorem 3.17
